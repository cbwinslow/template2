name: ü§ñ Advanced Automation & Utility Showcase

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  issues:
    types: [opened, edited, labeled]
  schedule:
    # Run automation tasks daily at 4 AM UTC
    - cron: '0 4 * * *'
    # Run weekly maintenance on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - maintenance
          - documentation
          - dependency-management
          - issue-management
          - pr-automation
          - release-automation

jobs:
  # ============================================================================
  # REPOSITORY MAINTENANCE & CLEANUP
  # ============================================================================
  
  repository-maintenance:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'maintenance') || github.event.schedule == '0 2 * * 0'
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Repository cleanup and maintenance
      - name: üßπ Cleanup Merged Branches
        uses: jessfraz/branch-cleanup-action@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üè∑Ô∏è Auto-label Issues and PRs
        uses: github/issue-labeler@v3.2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          enable-versioned-regex: true
      
      # Stale issue and PR management
      - name: üï∞Ô∏è Mark Stale Issues and PRs
        uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          days-before-stale: 60
          days-before-close: 14
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had 
            activity for 60 days. It will be closed in 14 days if no further activity occurs.
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had 
            activity for 60 days. It will be closed in 14 days if no further activity occurs.
          stale-issue-label: 'stale'
          stale-pr-label: 'stale'
          exempt-issue-labels: 'enhancement,bug,security'
          exempt-pr-labels: 'work-in-progress,dependencies'
      
      # Close duplicate issues
      - name: üîÑ Close Duplicate Issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'duplicate'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'üîÑ This issue has been automatically closed as a duplicate.'
              });
            }
      
      # Repository statistics and insights
      - name: üìä Generate Repository Statistics
        uses: lowlighter/metrics@latest
        with:
          token: ${{ secrets.METRICS_TOKEN }}
          user: ${{ github.repository_owner }}
          template: classic
          base: header, activity, community, repositories, metadata
          plugin_lines: yes
          plugin_languages: yes
          plugin_languages_details: bytes-size, percentage
          plugin_topics: yes
          plugin_topics_limit: 15
          plugin_stargazers: yes
          plugin_forks: yes
          config_timezone: UTC
      
      # Update repository topics based on content
      - name: üè∑Ô∏è Auto-update Repository Topics
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const topics = new Set();
            
            // Detect technologies based on files
            if (fs.existsSync('package.json')) topics.add('javascript', 'nodejs');
            if (fs.existsSync('requirements.txt')) topics.add('python');
            if (fs.existsSync('go.mod')) topics.add('golang');
            if (fs.existsSync('pom.xml')) topics.add('java', 'maven');
            if (fs.existsSync('Dockerfile')) topics.add('docker');
            if (fs.existsSync('docker-compose.yml')) topics.add('docker-compose');
            if (fs.existsSync('.github/workflows')) topics.add('github-actions', 'ci-cd');
            if (fs.existsSync('terraform')) topics.add('terraform', 'infrastructure-as-code');
            if (fs.existsSync('k8s')) topics.add('kubernetes');
            
            // Add template-specific topics
            topics.add('template', 'boilerplate', 'starter', 'automation');
            
            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: Array.from(topics)
            });

  # ============================================================================
  # DEPENDENCY MANAGEMENT & UPDATES
  # ============================================================================
  
  dependency-management:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'dependency-management')
    
    permissions:
      contents: write
      pull-requests: write
    
    strategy:
      matrix:
        ecosystem: [npm, pip, maven, go, docker]
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      
      # Renovate dependency updates
      - name: üîÑ Renovate Dependency Updates
        uses: renovatebot/github-action@v39.2.3
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          LOG_LEVEL: info
      
      # Security updates with Dependabot alerts
      - name: üîí Check Security Vulnerabilities
        uses: actions/github-script@v7
        with:
          script: |
            const { data: alerts } = await github.rest.dependabotAlerts.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            if (alerts.length > 0) {
              const summary = alerts.map(alert => 
                `- **${alert.security_advisory.summary}** (${alert.security_advisory.severity})`
              ).join('\n');
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Security Vulnerabilities Detected',
                body: `## Security Alert Summary\n\n${summary}\n\nPlease review and update dependencies.`,
                labels: ['security', 'dependencies', 'automated']
              });
            }
      
      # License compliance check
      - name: üìú License Compliance Check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          project: github.com/${{ github.repository }}
        continue-on-error: true
      
      # Dependency vulnerability scanning
      - name: üõ°Ô∏è Audit Dependencies
        run: |
          echo "Auditing ${{ matrix.ecosystem }} dependencies..."
          case "${{ matrix.ecosystem }}" in
            npm)
              if [ -f "package.json" ]; then
                npm audit --audit-level moderate || true
                npm audit fix --dry-run || true
              fi
              ;;
            pip)
              if [ -f "requirements.txt" ]; then
                pip install safety
                safety check -r requirements.txt || true
              fi
              ;;
            maven)
              if [ -f "pom.xml" ]; then
                mvn org.owasp:dependency-check-maven:check || true
              fi
              ;;
            go)
              if [ -f "go.mod" ]; then
                go list -json -deps ./... | nancy sleuth || true
              fi
              ;;
            docker)
              if [ -f "Dockerfile" ]; then
                docker run --rm -v $(pwd):/app anchore/grype:latest /app || true
              fi
              ;;
          esac

  # ============================================================================
  # AUTOMATED DOCUMENTATION GENERATION
  # ============================================================================
  
  documentation-automation:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'documentation')
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Auto-generate API documentation
      - name: üìö Generate API Documentation
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: üìñ Generate OpenAPI Documentation
        run: |
          # Generate API docs for different languages
          if [ -f "package.json" ]; then
            npm install -g swagger-jsdoc swagger-ui-dist
            # Generate Swagger docs from JSDoc comments
          fi
          
          if [ -f "requirements.txt" ]; then
            pip install sphinx autodoc
            # Generate Sphinx documentation
          fi
          
          if [ -f "pom.xml" ]; then
            mvn javadoc:javadoc || true
          fi
          
          if [ -f "go.mod" ]; then
            go install golang.org/x/tools/cmd/godoc@latest
            godoc -http=:6060 &
            sleep 5
            wget -r -np -k -E http://localhost:6060/pkg/github.com/${{ github.repository }}/ || true
          fi
      
      # Auto-generate README badges
      - name: üèÜ Update README Badges
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let readme = fs.readFileSync('README.md', 'utf8');
            
            // Add/update standard badges
            const badges = [
              '![GitHub License](https://img.shields.io/github/license/${{ github.repository }})',
              '![GitHub Stars](https://img.shields.io/github/stars/${{ github.repository }})',
              '![GitHub Forks](https://img.shields.io/github/forks/${{ github.repository }})',
              '![GitHub Issues](https://img.shields.io/github/issues/${{ github.repository }})',
              '![GitHub Pull Requests](https://img.shields.io/github/issues-pr/${{ github.repository }})',
              '![Last Commit](https://img.shields.io/github/last-commit/${{ github.repository }})',
              '![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/ci.yml)',
              '![Code Climate](https://img.shields.io/codeclimate/maintainability/${{ github.repository }})',
              '![Codecov](https://img.shields.io/codecov/c/github/${{ github.repository }})'
            ];
            
            // Update README if badges section exists
            if (readme.includes('<!-- BADGES -->')) {
              const badgeSection = badges.join('\n');
              readme = readme.replace(
                /<!-- BADGES -->[\s\S]*?<!-- \/BADGES -->/,
                `<!-- BADGES -->\n${badgeSection}\n<!-- /BADGES -->`
              );
              fs.writeFileSync('README.md', readme);
            }
      
      # Generate changelog
      - name: üìù Generate Changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-config.json'
          outputFile: 'CHANGELOG.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Generate contributor list
      - name: üë• Update Contributors
        uses: akhilmhdh/contributors-readme-action@v2.3.6
        with:
          readme_path: 'README.md'
          use_username: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Generate table of contents
      - name: üìë Generate Table of Contents
        uses: technote-space/toc-generator@v4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_PATHS: 'README.md,docs/**/*.md'
      
      # Commit documentation updates
      - name: üíæ Commit Documentation Updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'üìö Automated documentation update'
          file_pattern: '*.md docs/**/*.md CHANGELOG.md'
          commit_options: '--no-verify'

  # ============================================================================
  # ISSUE MANAGEMENT AUTOMATION
  # ============================================================================
  
  issue-automation:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'issue-management')
    
    permissions:
      issues: write
      pull-requests: write
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
      
      # Auto-assign issues to project boards
      - name: üìã Add to Project Board
        uses: alex-page/github-project-automation-plus@v0.8.3
        with:
          project: 'Template Repository Management'
          column: 'To Do'
          repo-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      
      # Auto-assign based on issue type
      - name: üë§ Auto-assign Issues
        uses: pozil/auto-assign-issue@v1.12.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          assignees: ${{ github.repository_owner }}
          numOfAssignee: 1
      
      # Welcome first-time contributors
      - name: üëã Welcome New Contributors
        uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: |
            üëã Thanks for opening your first issue! We're glad you're here.
            
            To help us help you:
            - Make sure you've filled out the issue template completely
            - Include steps to reproduce if reporting a bug
            - Check if this issue already exists
            
            A maintainer will review this soon!
          pr-message: |
            üéâ Thanks for your first contribution! We're excited to review your changes.
            
            Please make sure:
            - Your PR description clearly explains the changes
            - Tests are included if applicable
            - Documentation is updated if needed
            
            We'll review this as soon as possible!
      
      # Auto-comment on specific labels
      - name: üè∑Ô∏è Auto-comment Based on Labels
        if: github.event.action == 'labeled'
        uses: actions/github-script@v7
        with:
          script: |
            const label = context.payload.label.name;
            const issueNumber = context.payload.issue.number;
            let comment = '';
            
            switch(label) {
              case 'bug':
                comment = `üêõ Thanks for reporting this bug! Please ensure you've provided:
                - Clear steps to reproduce
                - Expected vs actual behavior
                - Environment details
                
                A maintainer will investigate this issue.`;
                break;
              case 'enhancement':
                comment = `‚ú® Thanks for the feature request! Please provide:
                - Clear description of the desired functionality
                - Use cases that would benefit
                - Any implementation ideas
                
                We'll evaluate this enhancement for future releases.`;
                break;
              case 'help wanted':
                comment = `üôã‚Äç‚ôÄÔ∏è This issue is open for community contributions!
                
                If you'd like to work on this:
                1. Comment to let us know you're interested
                2. Fork the repository
                3. Create a feature branch
                4. Submit a pull request
                
                Thanks for helping improve the project! üöÄ`;
                break;
              case 'duplicate':
                comment = `üîÑ This appears to be a duplicate issue.
                
                Please search existing issues before creating new ones.
                If you believe this is not a duplicate, please provide additional context.`;
                break;
            }
            
            if (comment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: comment
              });
            }

  # ============================================================================
  # PULL REQUEST AUTOMATION
  # ============================================================================
  
  pr-automation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'pr-automation')
    
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
      
      # Auto-assign reviewers
      - name: üë• Auto-assign Reviewers
        uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          configuration-path: '.github/auto-assign.yml'
      
      # Add PR size label
      - name: üìè Label PR Size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: 10
          s_label: 'size/s'
          s_max_size: 100
          m_label: 'size/m'
          m_max_size: 500
          l_label: 'size/l'
          l_max_size: 1000
          xl_label: 'size/xl'
      
      # Check for breaking changes
      - name: üí• Check Breaking Changes
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const body = context.payload.pull_request.body.toLowerCase();
            
            const breakingKeywords = ['breaking', 'break', 'major', '!', 'incompatible'];
            const hasBreaking = breakingKeywords.some(keyword => 
              title.includes(keyword) || body.includes(keyword)
            );
            
            if (hasBreaking) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['breaking-change']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `‚ö†Ô∏è **Breaking Change Detected**
                
                This PR appears to contain breaking changes. Please ensure:
                - Version bump follows semantic versioning
                - Migration guide is provided
                - Changelog mentions breaking changes
                - Documentation is updated`
              });
            }
      
      # Auto-merge dependabot PRs
      - name: ü§ñ Auto-merge Dependabot PRs
        uses: fastify/github-action-merge-dependabot@v3.9.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor
          merge-method: squash
      
      # Generate PR description template
      - name: üìù PR Description Check
        uses: Slashgear/action-check-pr-description@v1.3.2
        with:
          template: .github/pull_request_template.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # RELEASE AUTOMATION
  # ============================================================================
  
  release-automation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.inputs.automation_type, 'all') || contains(github.event.inputs.automation_type, 'release-automation')
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Semantic release
      - name: üöÄ Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
            @semantic-release/github@8.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Create GitHub release
      - name: üì¶ Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*
            build/*
            target/*.jar
          generate_release_notes: true
          prerelease: contains(github.ref, '-')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Update release documentation
      - name: üìö Update Release Documentation
        run: |
          # Update version in documentation
          find docs -name "*.md" -exec sed -i 's/version: [0-9].[0-9].[0-9]/version: ${{ github.ref_name }}/g' {} \;
          
          # Update installation instructions
          sed -i 's/github.com\/${{ github.repository }}@[^"]*"/github.com\/${{ github.repository }}@${{ github.ref_name }}"/g' README.md
        if: startsWith(github.ref, 'refs/tags/')
      
      # Post-release tasks
      - name: üì¢ Post-release Notifications
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üéâ New Release Published!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Release Notes",
                      "value": "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: startsWith(github.ref, 'refs/tags/')

  # ============================================================================
  # AUTOMATION REPORTING & METRICS
  # ============================================================================
  
  automation-reporting:
    needs: [repository-maintenance, dependency-management, documentation-automation, issue-automation, pr-automation, release-automation]
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: üìä Generate Automation Report
        run: |
          mkdir -p reports
          
          cat > reports/automation-summary.md << 'EOF'
          # Repository Automation Report
          
          **Generated**: $(date -u)
          **Repository**: ${{ github.repository }}
          **Triggered by**: ${{ github.event_name }}
          **Actor**: ${{ github.actor }}
          
          ## Automation Results
          
          ### Repository Maintenance
          - **Status**: ${{ needs.repository-maintenance.result }}
          - **Tasks**: Branch cleanup, issue labeling, stale management, statistics
          
          ### Dependency Management
          - **Status**: ${{ needs.dependency-management.result }}
          - **Ecosystems**: npm, pip, maven, go, docker
          - **Tools**: Renovate, Dependabot, FOSSA, Security audits
          
          ### Documentation Automation
          - **Status**: ${{ needs.documentation-automation.result }}
          - **Updates**: API docs, README badges, changelog, contributors, TOC
          
          ### Issue Management
          - **Status**: ${{ needs.issue-automation.result }}
          - **Features**: Auto-assign, project boards, welcome messages, smart comments
          
          ### PR Automation
          - **Status**: ${{ needs.pr-automation.result }}
          - **Features**: Reviewer assignment, size labeling, breaking change detection
          
          ### Release Automation
          - **Status**: ${{ needs.release-automation.result }}
          - **Tools**: Semantic release, GitHub releases, notifications
          
          ## Metrics & Statistics
          - **Total Actions Used**: 15+ automation actions
          - **Automation Coverage**: Repository, Dependencies, Documentation, Issues, PRs, Releases
          - **Time Saved**: Estimated 10+ hours per week of manual tasks
          
          ## Recommendations
          - Review automated changes for accuracy
          - Adjust automation rules based on team needs
          - Monitor automation performance and effectiveness
          
          ---
          *This report showcases comprehensive repository automation using GitHub Actions marketplace.*
          EOF
      
      - name: üì§ Upload Automation Reports
        uses: actions/upload-artifact@v4
        with:
          name: automation-reports
          path: reports/
          retention-days: 30
      
      - name: üìà Update Automation Metrics
        uses: actions/github-script@v7
        with:
          script: |
            // Create or update automation dashboard issue
            const title = 'ü§ñ Automation Dashboard';
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automation,dashboard'
            });
            
            const dashboardIssue = issues.find(issue => issue.title === title);
            
            const body = `# ü§ñ Repository Automation Dashboard
            
            Last Updated: ${new Date().toISOString()}
            
            ## Current Status
            - **Repository Maintenance**: ‚úÖ Active
            - **Dependency Management**: ‚úÖ Active  
            - **Documentation Automation**: ‚úÖ Active
            - **Issue Management**: ‚úÖ Active
            - **PR Automation**: ‚úÖ Active
            - **Release Automation**: ‚úÖ Active
            
            ## Recent Activity
            - Last maintenance run: ${new Date().toDateString()}
            - Automation actions used: 15+
            - Estimated time saved: 10+ hours/week
            
            ## Automation Features
            ### üßπ Repository Maintenance
            - Branch cleanup after merge
            - Stale issue/PR management
            - Auto-labeling system
            - Repository statistics generation
            - Topic auto-updating
            
            ### üîÑ Dependency Management  
            - Renovate automated updates
            - Security vulnerability alerts
            - License compliance checking
            - Multi-ecosystem support (npm, pip, maven, go, docker)
            
            ### üìö Documentation
            - API documentation generation
            - README badge updates
            - Changelog generation
            - Contributor list updates
            - Table of contents generation
            
            ### üé´ Issue Management
            - Auto-assignment to projects
            - Welcome messages for new contributors
            - Smart commenting based on labels
            - Duplicate detection and closure
            
            ### üîÄ Pull Request Automation
            - Reviewer auto-assignment
            - PR size labeling
            - Breaking change detection
            - Dependabot auto-merge
            - Description template checking
            
            ### üöÄ Release Management
            - Semantic versioning
            - Automated release creation
            - Release notes generation
            - Documentation updates
            - Release notifications
            
            ---
            *This dashboard is automatically updated by GitHub Actions*`;
            
            if (dashboardIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: dashboardIssue.number,
                body: body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automation', 'dashboard', 'pinned']
              });
            }