version: '3.8'

services:
  # Python FastAPI service
  python-api:
    build:
      context: ./examples/python
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/template2
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./examples/python:/app
      - python_cache:/root/.cache
    depends_on:
      - postgres
      - redis
    networks:
      - template2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Express service
  nodejs-api:
    build:
      context: ./examples/nodejs
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/template2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-development-secret
    volumes:
      - ./examples/nodejs:/home/node/app
      - nodejs_modules:/home/node/app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - template2-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Gin service
  go-api:
    build:
      context: ./examples/go
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/template2
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./examples/go:/app
      - go_cache:/go/pkg/mod
    depends_on:
      - postgres
      - redis
    networks:
      - template2-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=template2
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - template2-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - template2-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites:/etc/nginx/conf.d
    depends_on:
      - python-api
      - nodejs-api
      - go-api
    networks:
      - template2-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - template2-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - template2-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  python_cache:
  nodejs_modules:
  go_cache:

networks:
  template2-network:
    driver: bridge